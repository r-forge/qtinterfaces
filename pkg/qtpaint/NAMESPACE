useDynLib(qtpaint)

importFrom(qtgui, qshow, qclose, qgraphicsScene, "qmatrix<-", "qmatrix",
           "qgeometry<-", qaddItem, qgeometry, qboundingRect, qitems, qupdate,
           qcacheMode, "qcacheMode<-", qfocus, qfitScene, qminimumSize,
           "qminimumSize<-")
export(qgraphicsScene, qplotView, "qmatrix<-", "qmatrix", "qgeometry<-",
       qgeometry, qaddItem, qboundingRect, qitems, qupdate, qcacheMode,
       "qcacheMode<-", qfocus, qminimumSize, "qminimumSize<-")

importFrom(qtbase, qfont, qrect, qpoint, qsize, qcolor)
export(qshow, qclose, qfont, qrect, qpoint, qsize, qcolor)

export("qantialias<-",
       qdrawCircle,
       "qdash<-",
       "qfillColor<-",
       "qfont<-",
       qdrawGlyph,
       "qhasFill<-",
       "qhasStroke<-",
       "qlineWidth<-",
       "qmatrixEnabled<-",
       qpath,
       qpathCircle,
       qpathPolygon,
       qpathRect,
       qpathSegment,
       qpathText,
       qdrawPoint,
       qdrawPolygon,
       qdrawLine,
       qdrawRect,
       qdrawSegment,
       "qstrokeColor<-",
       qdrawText,
       qtextExtents,
       qstrWidth,
       qdrawImage
       )

S3method(qmatrix, Painter)
S3method("qmatrix<-", Painter)

export(qoverlay,
       qlayer,
       qpaintingView,
       qlimits,
       "qlimits<-",
       qdeviceMatrix,
       "qbackgroundColor<-",
       qprimitives,
       "qopengl<-")

S3method(qboundingRect, QGraphicsView)
S3method(qaddItem, QViz::Layer)

export(qmap, qscale, qtranslate, qrotate, qflipY)

S3method("[<-", "QViz::Layer")
S3method(dim, QGraphicsView)

export("qrowStretch<-")
