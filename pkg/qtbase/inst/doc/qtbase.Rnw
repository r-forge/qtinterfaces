% \VignetteIndexEntry{Introduction to qtbase}
% \VignetteKeywords{foreign interface, GUI}
% \VignettePackage{qtbase}
\documentclass[10pt]{article}

\usepackage{times}
\usepackage{hyperref}

\textwidth=6.5in
\textheight=8.5in
% \parskip=.3cm
\oddsidemargin=-.1in
\evensidemargin=-.1in
\headheight=-.3in

\newcommand{\Rfunction}[1]{{\texttt{#1}}}
\newcommand{\Robject}[1]{{\texttt{#1}}}
\newcommand{\Rpackage}[1]{{\textbf{#1}}}
\newcommand{\Rmethod}[1]{{\texttt{#1}}}
\newcommand{\Rfunarg}[1]{{\texttt{#1}}}
\newcommand{\Rclass}[1]{{\textit{#1}}}
\newcommand{\Rcode}[1]{{\texttt{#1}}}

\newcommand{\software}[1]{\textsf{#1}}
\newcommand{\R}{\software{R}}
\newcommand{\Qt}{\software{Qt}}
\newcommand{\qtbase}{\Rpackage{qtbase}}

\title{An Introduction to \qtbase{}}
\author{Michael Lawrence}
\date{\today}

\begin{document}

\maketitle

<<setup,echo=FALSE>>=
options(width=72)
library(qtbase)
@

\section{Overview}

The \qtbase{} package aims to interface all of \Qt\/ with \R. \Qt\/ is
an application framework, best known for its collection of GUI
widgets, and is developed by Nokia. Please see
\url{http://qt.nokia.com} for more information. 

All methods in \Qt\/ may be invoked from \R, and \R\/ may extend any \Qt\/
class. Here is a basic example of \qtbase{} syntax: 
<<syntax>>=
button <- Qt$QPushButton("Press Me!")
qconnect(button, "pressed", function() print("Pressed"))
button$show()
@ 
%
In the above, we create a button, register a callback
that is called when the button is pressed, and show the button on
the screen.

In the above example, we manipulate objects from all three types in
the core \qtbase{} API: libraries (\Rclass{RQtLibrary}), classes
(\Rclass{RQtClass}), and instances (\Rclass{RQtObject}).  These have
an approximately hierarchical relationship, and we will discuss each
in the following sections.

\section{Libraries}
\label{sec:libraries}

Each package that binds a library provides a \Rclass{RQtLibrary}
object. The \qtbase{} package itself provides the \Rcode{Qt} object,
which binds the Qt library.
<<Qt>>=
Qt
@
%
As evident from the above output, each library object is a container
of class objects, of type \Rclass{RQtClass}. 

A \Rclass{RQtLibrary} is a special type of \Rcode{environment} and may be
manipulated as any other environment:
<<libraries-as-environments>>=
head(ls(Qt))
Qt$QPushButton
@ 
%
We have just extracted the \R\/ class object for the C++ \Rcode{QWidget}
class, and we describe such objects in the next section.

\section{Classes}
\label{sec:classes}

A class object might represent an actual C++ class, an \R\/ derivative of
a C++ class, or a C++ namespace. A class object is a special type of \R\/
\Rcode{function} that serves as the constructor for the class:
<<QWidget>>=
button <- Qt$QPushButton("Press Me!")
@ 
%
Beyond its role as a constructor, the class object is a container of
static methods (or simple functions in the case of a namespace) and
enumerations. We invoke the static method \Rcode{tr} for translating text:
<<tr>>=
Qt$QPushButton$tr("Hello World")
@ 
%
The above code relies on a method for \Rcode{\$} that is specially
defined for the \Rclass{RQtClass}.

\section{Objects}
\label{sec:objects}

The \Rcode{button} object constructed above is a
\Rclass{RQtObject}. Like \Rclass{RQtClass}, \Rclass{RQtObject} is an
\Rcode{environment}. It contains methods and, for \Rcode{QObject}
derived instances, properties.
<<show>>=
button$show()
@ 
%
In the above, we obtain the \Rcode{show} method and invoke it to show
the button on the screen.

As \Rcode{QPushButton} extends \Rcode{QObject}, it has properties, and
one of its properties is its \Rcode{text} label:
<<text-property>>=
button$text
button$text <- "PUSH ME!"
@ 

\section{Connecting Signal Handlers}
\label{sec:signals}

In any GUI, the application needs to react to user
events. Qt supports this with signals. Here, we connect an \R\/ handler
to a signal that is emitted when the button is \Rcode{pressed}:
<<qconnect>>=
qconnect(button, "pressed", function() print("pushed"))
@ 
%
The signal connection is achieved with the \Rcode{qconnect}
function. The \R\/ function is invoked when the \Rcode{pressed} signal
is emitted on \Rcode{button}.

We now have a trivial but complete GUI. A widget, specifically a
button, is displayed on the screen, and \R\/ code is responding to user
input, a click of the button. For more examples, please see
\Rcode{demo(package="qtbase")}.  The rest of this vignette treats
advanced concepts, including the ability to extend C++ classes in \R.

\section{Extending C++ Classes}
\label{sec:extension}

Many C++ libraries expect the user to extend C++ classes in normal
course. For interfacing \R\/ with \Qt, this presents a complication: the \R\/
user must be able to extend a \Qt/C++ class. 

We will demonstrate this functionality by example. Our aim is to
extend the \Rcode{QValidator} class to restrict the input in a text
entry (\Rcode{QTextEdit}) to positive numbers. The first step is to
declare the class, and then methods are added individually to the
class definition, in an analogous manner to the \Rpackage{methods}
package. We start by declaring the class:
<<qsetClass>>=
qsetClass("PositiveValidator", Qt$QValidator)
@ 
%
The class name is given as \Rcode{PositiveValidator} and it extends the
\Rcode{QValidator} class in \Qt. Note that only single inheritance is
supported.

As a side-effect of the call to \Rfunction{qsetClass}, a variable
named \Rcode{PositiveValidator} has been assigned into the global
environment (the scoping is similar to \Rfunction{methods::setClass}):
<<list-validator-class>>=
PositiveValidator
@ 
%
To define a method on our class, we call the \Rfunction{qsetMethod}
function:
<<validate, echo=FALSE>>=
validatePositive <- function(input, pos) {
  val <- suppressWarnings(as.integer(input))
  if (!is.na(val)) {
    if (val > 0)
      Qt$QValidator$Acceptable
    else Qt$QValidator$Invalid
  } else {
    if (input == "")
      Qt$QValidator$Acceptable
    else Qt$QValidator$Invalid
  }
}
@ 
<<qsetMethod>>=
qsetMethod("validate", PositiveValidator, validatePositive)
@ 
%
The virtual method \Rcode{validate} declared by \Rcode{QValidator} has
been overriden by the \Rcode{PositiveValidator} class.  The
\Rfunction{validatePositive} function implements the override and has
been defined invisibly for readability.

As an \Rclass{RQtClass} object, we can create an instance by invoking
\Rfunction{PositiveValidator} as a \Rcode{function}:
<<construct-validator>>=
validator <- PositiveValidator()
@ 
%
Now that we have our validator, we can use it with a text entry:
<<text-entry>>=
e <- Qt$QLineEdit()
v <- PositiveValidator(e)
e$setValidator(v)
e$show()
@ 

Often, it is necessary to customize the constructor of an \R\/
class. The \R\/ function implementing the constructor must be passed
during the call to \Rfunction{qsetClass}. Here, we extend
\Rcode{QMainWindow} so that its title is always a preset string:
<<extend-window-title>>=
qsetClass("MyMainWindow", Qt$QMainWindow, function(parent = NULL) {
  super(parent)
  setWindowTitle("My Application")
})
MyMainWindow()$show()
@ 
%
By convention, every widget in \Qt\/ accepts its parent as an argument
to its constructor. Via \Rfunction{super}, the parent is passed to the
base class constructor and on up the hierarchy. The \Rfunction{super}
function does not exist outside the scope of a constructor (or
method). Within a constructor, \Rfunction{super} invokes the
constructor of the parent (super) class, with the given
arguments. Within a method implementation, \Rcode{super} will call a
method (named in the first parameter) in the parent class.

For more examples of extending C++ classes, please see
\Rcode{demo(package="qtbase")}.

\end{document}
